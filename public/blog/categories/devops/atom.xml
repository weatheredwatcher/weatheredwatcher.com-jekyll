<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DevOps, | weatheredwatcher]]></title>
  <link href="http://www.weatheredwatcher.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://www.weatheredwatcher.com/"/>
  <updated>2014-08-23T15:01:30-04:00</updated>
  <id>http://www.weatheredwatcher.com/</id>
  <author>
    <name><![CDATA[weatheredwatcher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Server Stuff a Developer Needs to Know (part 1)]]></title>
    <link href="http://www.weatheredwatcher.com/blog/2014/08/23/server-stuff-a-developer-needs-to-know/"/>
    <updated>2014-08-23T00:11:28-04:00</updated>
    <id>http://www.weatheredwatcher.com/blog/2014/08/23/server-stuff-a-developer-needs-to-know</id>
    <content type="html"><![CDATA[<p>Recently I have been moving more and more away from development and more into System Administration.  Still, my skills and experience in programming
means that I also have a good handle on developers. So I have been making a effort to move in the direction of DevOps.  I do some consultation work for
a startup that is currently coming out of the USC Incubator.  I mostly contribute as the Architect and help provide direction to the infrastructure and
coding best practices as well as run their servers.  So this fits perfectly in the role of DevOps.  One of the things that has really begun to frustrate me
is the lack of BASIC linux skills in developers that should know better.  I am not asking you to setup a fucking mail server or configure a load balancer.
I can do those things just fine without your help.  But there are certain things that a developer NEEDS to know how to do. So, here is the first in a series of posts
on some things that in my humble opinion a developer should be able to do without me holding their goddamn hand!</p>

<h2>Logging into and Deploying Code to a Server</h2>

<p>Guys, this is not that hard.  First of all: A secure server should be using ssh &mdash; NOT ftp.  Do not ask me for FTP access to my server.  I will not
give it to you.  No matter how many times you ask me to.</p>

<p>You can connect to a server using ssh like this:</p>

<pre><code>ssh username@hostname
</code></pre>

<p>If you do not want to use a password, or if I decide not to give you one, you will need to provide me with a public key.  It is fairly easy.  On a
Linux/Unix system, in the termianl type:</p>

<pre><code>ssh-keygen -t rsa -f ~/.ssh/id_rsa
</code></pre>

<p>This will give you a key pair. Email me the one with the .pub extension</p>

<pre><code>id_rsa.pub
</code></pre>

<p>Running Windows?  Either install git and use git-bash or install Cygwin and run the Bash shell.  The above commands will work for you too.</p>

<p>Then you should be able to log in without a password.   Having issues?</p>

<pre><code>ssh user@hostname -i ~/.ssh/id_rsa.pub
</code></pre>

<p>Rather do it yourself? Once you have logged in to the server with your given user name, you can add your key to the authorized_keys file.</p>

<p>It needs to be in a file called  ~/.ssh/authorized_keys</p>

<p>Now on to deployment.  Most of the time there is going to be some procedure in place for production deployments, but not so much on a dev server.
You should be able to upload your code to the server. Aside from using git, which is just easy, I personally like secure copy or scp.  It is fairly simple to use,
especially if you already have a key setup on the remote server.  The syntax is easy:</p>

<pre><code>scp -r localfolder/ user@remotehost:/path/to/server
</code></pre>

<p>If you would rather use rsync:</p>

<pre><code>rsync -r localfolder/ user@remotehost:/path/to/server
</code></pre>

<p>It&rsquo;s not rocket science people!  Learn some basic Linux!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevOps: Bulding Projects with Ant]]></title>
    <link href="http://www.weatheredwatcher.com/blog/2013/08/07/devops-building-projects-with-ant/"/>
    <updated>2013-08-07T10:46:00-04:00</updated>
    <id>http://www.weatheredwatcher.com/blog/2013/08/07/devops-building-projects-with-ant</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been running a build process for an application that I am working on that is rather complicated.  Originally I was manually managing the build process, with a few scripts to supplement my procedures.  The past few days I have finally had the time to sit down and consolidate my build into a single ant script.  The company that I am contracting for is a heavy Java shop, so I am using Ant mostly because everyone will have access to ant.  I am use to make so it&rsquo;s been a bit of a learning curve, but Ant is a very cool thing.  So, for starters, let me outline my current build process and then I will show you how I have automated it.</p>

<ol>
<li>We pull the code from the QA branch in GitHub</li>
<li>Run Composer over the code to install all the dependencies</li>
<li>We tag the build with a version tag</li>
<li>We write the version tag and the date to a version file</li>
<li>We tar up ONLY the files that are absolutely needed to run the application (we have tools, docs, ect that we do not need)</li>
<li>We send the final archive to the server team for deployment</li>
</ol>


<p>Actually, I started using Ant early on for the final tar build.  Ant has a great task for tar.  Here is the target for that.</p>

<pre><code>&lt;target name="deploy"&gt;
      &lt;tar destfile="deploy.tar"
           basedir="build/"   
           excludes="build/**, database/**, docs/**.vagrant/**"/&gt;

&lt;/target&gt;
</code></pre>

<p>This essentially creates a file called <code>deploy.tar</code> in a sub-folder called <code>build/</code>.  It excludes anything already in <code>build/</code> as well as <code>database/</code>, <code>docs/', and</code>.vagrant'.  Obviously I truncated my list&hellip;it is a lot longer in reality!  A lot of files sit in the root like the <code>Vagrantfile</code>, a <code>Makefile</code> the files for composer.</p>

<p>So this is about the final step.  But I still need to automate the rest.</p>

<p>The first step is grabbing my code from GitHub.  Eclipse offers a task for any that is based on jgit.  You need a few dependencies for this to work.  Namely the jgit class file and the jgit-ant class file.  You also need the ssh library, which I was already using for some other scripts.</p>

<p>You need to load them as resources, which is done like so:</p>

<pre><code>&lt;taskdef resource="org/eclipse/jgit/ant/ant-tasks.properties"&gt;
     &lt;classpath&gt;
       &lt;pathelement location="resources/org.eclipse.jgit.ant-3.0.0.2013061825-r.jar"/&gt;
       &lt;pathelement location="resources/org.eclipse.jgit-3.0.0.2013061825-r.jar"/&gt;
       &lt;pathelement location="../jsch-0.1.49.jar"/&gt;
     &lt;/classpath&gt;
&lt;/taskdef&gt;
</code></pre>

<p>Then we set up the task for cloning:</p>

<pre><code>&lt;target name="clone"&gt;
     &lt;git-clone 
         uri="git@github.com:weatheredwatcher/weatheredwatcher.git" 
         branch="testing"
         dest="build/" /&gt;
&lt;/target&gt;
</code></pre>

<p>(Note that I am using this site rather then the project that I am working on&hellip;)</p>

<p>The next step is running Composer.  For those that do not know, Composer is a dependency management tool for PHP.  We are loading several dependencies as well as some custom libs via composer so it is important that we generate the right files.</p>

<pre><code>&lt;target name="init" description="Installing Denpendencies"&gt;
  &lt;delete file="build/composer.lock" /&gt;

    &lt;exec executable="php" failonerror="true"
        dir="build/"&gt;
        &lt;arg value="composer.phar" /&gt;
        &lt;arg value="install" /&gt;
  &lt;/exec&gt;

&lt;/target&gt;
</code></pre>

<p>So what we are doing here is first we delete the lock file. Typically the devs install a few extra tools that are not needed on the QA server.  So we remove the lock file and then only install the production level requirements with Composer.  <code>failonerror</code> ensure that we get an error if anything bad happens rather then a success.</p>

<p>As far as tagging goes, I feel it is better to do the tagging in GitHub rather then in the build process.  So we will only be writing to a version file.  We need to write the current tag as well as the build date to this file.  The git command for displaying the current tag is <code>git describe --exact-match --abbrev=0</code>.  We antify this like so:</p>

<pre><code>&lt;exec executable="git" failonerror="true"
   dir="build/"&gt;
   &lt;arg value="describe" /&gt;
   &lt;arg value="--exact-match" /&gt;
   &lt;arg value="--abbrev=0" /&gt;
   &lt;redirector output="build/version" /&gt;
&lt;/exec&gt;
</code></pre>

<p>The last part was hard.  You cannot pass a redirect <code>&gt;</code> through the <code>exec</code> task.  Instead, we use the <code>redirector</code>.  The date is similar, but we add an append option to the redirector to make sure we do not overwrite the file.</p>

<pre><code>&lt;exec executable="date" dir="build/"&gt;
  &lt;redirector output="build/version" append="true"/&gt;
&lt;/exec&gt;  
</code></pre>

<p>So if we put it all together into a massive ant script, we have nearly the entire deploy build.  The last part is the one where we send it along to the Server Team&rsquo;s folders via a mount and a copy.</p>

<p>The final thing to do is to clean up.</p>

<pre><code>&lt;target name="clean"&gt;
    &lt;delete dir="build"/&gt;
&lt;/target&gt;
</code></pre>

<p>My next step will be taking this process and integrating it into a Hudson build for Continuous Integration or CI.  Obviously, Hudson will be able to take on a lot of this functionality without any ant scripts&hellip;but I also can just have Hudson run the ant script if I want.  We will see.  Until then, happy coding!!</p>
]]></content>
  </entry>
  
</feed>
