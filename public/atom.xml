<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[weatheredwatcher]]></title>
  <link href="http://weatheredwatcher.github.io/weatheredwatcher/atom.xml" rel="self"/>
  <link href="http://weatheredwatcher.github.io/weatheredwatcher/"/>
  <updated>2014-03-21T22:41:29-04:00</updated>
  <id>http://weatheredwatcher.github.io/weatheredwatcher/</id>
  <author>
    <name><![CDATA[weatheredwatcher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[a new post]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2013/09/28/a-new-post/"/>
    <updated>2013-09-28T10:46:00-04:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2013/09/28/a-new-post</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preparing a Dev Environment with Puppet]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2013/02/01/preparing-a-dev-environment-with-puppet/"/>
    <updated>2013-02-01T00:00:00-05:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2013/02/01/preparing-a-dev-environment-with-puppet</id>
    <content type="html"><![CDATA[<p>For starts, I now have markup installed in my blog, so no more typing html!! Yea!\n
Today we are going to talk about Puppet.  No, not Pinochio, or those Punch and Judy dolls.  This is Puppet as in the server provisioning tool.</p>

<p>At work I am setting up a development environment for our dev team.  Since most of them are just learning php, and for over all consistency I am using Vagrant to build a standard dev vm for everyone to work off of.</p>

<p>The general requirements are simple:</p>

<p> 1 We must run Zend Server
 2 We must load the php drivers MS Sql
 3 We must install subversion</p>

<p>With these requirements in mind, I set out to build my first puppet script.</p>

<p>The first class that we define is our services class.  I need to make sure that Apache is running.  Also, I found out that Cent Os turns iptables on by default.  That interferes with the dev box, as well as being unnecessary!  So we make sure that iptables is off.</p>

<pre><code>class services {
  #we want apache
  service { 
    'httpd':
      ensure =&gt; running,
      enable =&gt; true
  }

  service {
    'iptables':
      ensure =&gt; stopped,
      enable =&gt; false
  }
}
</code></pre>

<p>The next two classes work in tandem.  The repos class defines our Zend Server repo and packages install the required packages.</p>

<pre><code>class packages {
  package {
    "httpd":                      ensure =&gt; "present"; # Apache
    "subversion":                 ensure =&gt; "present"; # Subversion
    "zend-server-ce-php-5.3":     ensure =&gt; "present"; # Zend Server (CE)
    "php-5.3-mssql-zend-server":  ensure =&gt; "present"; # MSSQL Extenstion - provided by Zend
  }
}


class repos {
  #lets install some repos
  file { "/etc/yum.repos.d/zend.repo":
    content =&gt; "[Zend]
name=Zend Server
baseurl=http://repos.zend.com/zend-server/rpm/x86_64
enabled=1
gpgcheck=1
gpgkey=http://repos.zend.com/zend.key

[Zend_noarch]
name=Zend Server - noarch
baseurl=http://repos.zend.com/zend-server/rpm/noarch
enabled=1
gpgcheck=1
gpgkey=http://repos.zend.com/zend.key
    "
  }

}
</code></pre>

<p>If anyone wants to see the entire file, here it is:</p>

<p>stage {</p>

<p>  &lsquo;users&rsquo;:      before => Stage[&lsquo;repos&rsquo;];
  &lsquo;repos&rsquo;:      before => Stage[&lsquo;packages&rsquo;];
  &lsquo;packages&rsquo;:   before => Stage[&lsquo;configure&rsquo;];
  &lsquo;configure&rsquo;:  before => Stage[&lsquo;services&rsquo;];
  &lsquo;services&rsquo;:   before => Stage[&lsquo;main&rsquo;];</p>

<p>}</p>

<p>class services {
  #we want apache
  service {</p>

<pre><code>'httpd':
  ensure =&gt; running,
  enable =&gt; true
</code></pre>

<p>  }</p>

<p>  service {</p>

<pre><code>'iptables':
  ensure =&gt; stopped,
  enable =&gt; false
</code></pre>

<p>  }
}</p>

<p>class configure {</p>

<p>  # symlinking the code from /home/vagrant/public to var/www/public
  exec { &ldquo;public simlink&rdquo;:</p>

<pre><code>command =&gt; "/bin/ln -s /home/vagrant/public /var/www/",
unless  =&gt; "/usr/bin/test -L /var/www/",
</code></pre>

<p>  }
  file {&ldquo;/var/www/index.html&rdquo;:</p>

<pre><code>ensure =&gt; "absent"
</code></pre>

<p>  }
}</p>

<p>class packages {
  package {</p>

<pre><code>"httpd":                      ensure =&gt; "present"; # Apache
"subversion":                 ensure =&gt; "present"; # Subversion
"zend-server-ce-php-5.3":     ensure =&gt; "present"; # Zend Server (CE)
"php-5.3-mssql-zend-server":  ensure =&gt; "present"; # MSSQL Extenstion - provided by Zend
</code></pre>

<p>  }
}</p>

<p>class repos {</p>

<p>  file { &ldquo;/etc/yum.repos.d/zend.repo&rdquo;:</p>

<pre><code>content =&gt; "[Zend]
</code></pre>

<p>name=Zend Server
baseurl=<a href="http://repos.zend.com/zend-server/rpm/x86_64">http://repos.zend.com/zend-server/rpm/x86_64</a>
enabled=1
gpgcheck=1
gpgkey=<a href="http://repos.zend.com/zend.key">http://repos.zend.com/zend.key</a></p>

<p>[Zend_noarch]
name=Zend Server &ndash; noarch
baseurl=<a href="http://repos.zend.com/zend-server/rpm/noarch">http://repos.zend.com/zend-server/rpm/noarch</a>
enabled=1
gpgcheck=1
gpgkey=<a href="http://repos.zend.com/zend.key">http://repos.zend.com/zend.key</a></p>

<pre><code>"
</code></pre>

<p>  }</p>

<p>}</p>

<p>class users
{
  group { &ldquo;puppet&rdquo;:</p>

<pre><code>ensure =&gt; "present",
</code></pre>

<p>  }
  user { &ldquo;vagrant&rdquo;:</p>

<pre><code>ensure =&gt; "present",
</code></pre>

<p>  }
}</p>

<p>class {
  users:      stage => &ldquo;users&rdquo;;
  repos:      stage => &ldquo;repos&rdquo;;
  packages:   stage => &ldquo;packages&rdquo;;
  configure:  stage => &ldquo;configure&rdquo;;
  services:   stage => &ldquo;services&rdquo;;</p>

<p>}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Multiple Apps On NodeJs]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2013/01/24/running-multiple-apps-on-nodejs/"/>
    <updated>2013-01-24T00:00:00-05:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2013/01/24/running-multiple-apps-on-nodejs</id>
    <content type="html"><![CDATA[<p>So, what I am wanting to so is to be able to run multiple apps on Nodejs.  Specifically, I want to be able to use node-static to server static files and some other app (yet to be determined) to server up my blog as flat files.  I&rsquo;ve done this before in Ruby using Rack and Sinatra&hellip;so I figure I would give Nodejs&rsquo;s Bogart a try!\n
With a little bit of trial and error, I have come up with the best solution to this: Http-Proxy.</p>

<p>The first thing to look at will be my packages.json file.</p>

<pre><code>{
    "name": "bogart-test",
    "description": "Testing Bogart/FlatFile/Static structures",
    "version": "0.1.0",
    "author": "David Duggins",
    "email": "David Duggins",
    "main": "./app",
    "directories": { "lib": "./lib" },
    "dependencies": {
      "node-static": "&gt;=0.6.5",
      "bogart": "&gt;=0.2.0",
      "mustache": "0.3.1-dev",
      "http-proxy": "&gt;=0.0.0"
    }
}
</code></pre>

<p>The important stuff to note is node-static, bogart and node-static. I have not started to use mustache yet, but that may or may not be the templating engine.</p>

<p>Bogart by itself is fairly straight-forward.  It&rsquo;s just as easy to configure as Sinatra is for Ruby or Silex for php.  It&rsquo;s just handles routes.</p>

<p>var bogart = require(&lsquo;bogart&rsquo;);
var router = bogart.router();</p>

<p>router.get(&lsquo;/&rsquo;, function(req) {</p>

<p>  return bogart.html(&ldquo;hello world&rdquo;);
});</p>

<p>var app = bogart.app();
app.use(bogart.batteries); // A batteries included JSGI stack including streaming request body parsing, session, flash, and much more.
app.use(router); // Our router</p>

<p>app.start();</p>

<p> The above example with simply echo &ldquo;Hello World&rdquo; on the index of our site.  It is set to use the default port 8080.  That cam be easily changed with     app.start(&lsquo;10000&rsquo;, &lsquo;127.0.0.1&rsquo;)</p>

<p> The next part is node-static.  I want to be able to serve static files, like an about page.  Fairly simple as well:</p>

<p>var static = require(&lsquo;node-static&rsquo;);</p>

<p>//
// Create a node-static server to serve the current directory
//
var file = new(static.Server)(&lsquo;.&rsquo;, { cache: 7200, headers: {&lsquo;X-Hello&rsquo;:&lsquo;World!&rsquo;} });</p>

<p>require(&lsquo;http&rsquo;).createServer(function (request, response) {</p>

<pre><code>request.addListener('end', function () {
    //
    // Serve files!
    //
    file.serve(request, response, function (err, res) {
        if (err) { // An error as occured
            console.error("&gt; Error serving " + request.url + " - " + err.message);
            response.writeHead(err.status, err.headers);
            response.end();
        } else { // The file was served successfully
            console.log("&gt; " + request.url + " - " + res.message);
        }
    });
});
</code></pre>

<p>}).listen(1337);</p>

<p>This code merely pulls any static files and servers them. It requires that you use naming conventions like index.html to make sure that a file is pulled up via &lsquo;/&rsquo;.  You also can call other pages just like you would on a normal apache server.
The final part of this is configuring Bogart to use Http-proxy so that we can load the static pages only when we want to.
 To load http-proxy we need these two lines:</p>

<p>var http = require(&lsquo;http&rsquo;)
, httpProxy = require(&lsquo;http-proxy&rsquo;);</p>

<p> Then to use a proxy, we need this line:</p>

<p>  router.get(&lsquo;/&rsquo;, function(req) {
  return bogart.proxy(&lsquo;<a href="http://127.0.0.1:1337">http://127.0.0.1:1337</a>&rsquo;);
});</p>

<p>Remember that the static app is running on     1337.<br/>
 Well that is all for now.  I will be working on the other parts of this experiment and write more on it later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud9 IDE]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2013/01/09/cloud9-ide/"/>
    <updated>2013-01-09T00:00:00-05:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2013/01/09/cloud9-ide</id>
    <content type="html"><![CDATA[<p>A few days ago I went ahead and I install Cloud9 ide onto my laptop.  I&rsquo;ve been using the cloud version for editing this site as well as some other git-hub based sites and I love it.  I didn&rsquo;t think that I could love it even more then I did before, but I do!\n Locally, I can launch a workspace and start editing local files&hellip;and the console gives me complete shell access to my system!  I&rsquo;m working on a project that is being managed with subversion =( and the design team is using sass.  So when a change is made in the core style, I can go to the console and update the svn then compile sass with compass  and we are good to go!!
 Obviously I also use it with all my projects that are git based as well!!  It&rsquo;s very nice.  It&rsquo;s also very helpful with my New Years Resolution to learn Node.  Cloud9 is node based and gives a GREAT environment to develop node in.  Also, when I am using a single screen of the laptop, it&rsquo;s a great space saver.  C9 loads up in Chrome right next to the site I am working on.  I have all the Dev tools handy and can just go back and forth between the tabs!!
So go ahead and give it a try!  You can install it as easy as pie&hellip;look into the git hub repo: <a href="https://github.com/ajaxorg/cloud9!!">https://github.com/ajaxorg/cloud9!!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013 is here people]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2013/01/07/2013-is-here-people/"/>
    <updated>2013-01-07T00:00:00-05:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2013/01/07/2013-is-here-people</id>
    <content type="html"><![CDATA[<p>Well, it&rsquo;s here.  2013.  We made it!  2012 was a blast, but now we have another year to make plans for and strive for greatness!  I am pleased to say that a majority of my resolutions from last year where meet!  So, in that spirit, I shall now give you all my goals for 2013\n
  * Learn Node.js
  * Finish my python VHost app
  * Write a better mysql gui for *nix
  * Become a Debian Developer
  * Speak even more on php and Open Source
  * Get at least five articles published
  * Get started on my php book
  * Switch from CodeIgniter to Lithium</p>

<p>So there it is!  My little wish list for 2013!
I&rsquo;ve install cloud9 ide on my laptop today (if you are wondering, I will blog about it next) and in that is a good start on the Node js.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hark A Vagrant]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/12/09/hark-a-vagrant/"/>
    <updated>2012-12-09T00:00:00-05:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/12/09/hark-a-vagrant</id>
    <content type="html"><![CDATA[<p>Ok, so we start out today with a double reference!!  First we are paying homage to the incredibly funny web-comic Hark! A Vagrant.  If you are a history nerd certainly check it out!!(Hark A Vagrant).  But we are really talking about the really cool vm utility Vagrant.  In a nut shell: You download/load a VM packaged as a vagrant box.  It is loaded and run in the background using Virtual Box.  Once properly setup, you can ssh into it as well as view it&rsquo;s web contents in a browser. (using port forwarding).  It can also be provisioned using Chef or Puppet. \nWhat this means is that you can configure a custom server environment ready for your entire team and they can download it ready to go&hellip;.or if you want to save on downloadings..you can create a base system and then write a provisioning script that installs EVERYTHING that is needed.  It&rsquo;s a pretty sweet little setup!  It&rsquo;s also a great way to play around with different languages/environments on the fly.  I built my own base Debian Wheezy box and I have been using it to play around with Node.js without compromising my work environment!
Some link love:</p>

<ul>
<li><a href="http://vagrantup.com/">Vagrant</a></li>
<li><a href="http://wiki.opscode.com/display/chef/Home">Chef</a></li>
<li><a href="http://docs.puppetlabs.com/pe/2.0/cloudprovisioner_overview.html">Puppet</a></li>
</ul>


<p>I must say, that despite what I have heard, it was very easy to get setup and going&hellip;but that might also be because I am already using Linux, and so all the tools are running native.  I&rsquo;m not going to go through the step by step
here..the site does a good job of that.  I thought about linking my Wheezy box, but it is pretty big (700+ mb image).  I still might, and post it as an update.  Regardless, it is fairly easy to get started&hellip;they link to a base
Ubuntu box in the instructions.  Once you have practiced deploying a server, the provisioning tool is a lot of fun.  I have been using puppet and it is fairly easy to use.  The fun trick was creating my own image.  You have to
build a base VM in Virtual Box.  Make sure that you do not install any kind of GUI/Window Management on the box as it is not needed!!  You can actually customize the image before you package it&hellip;add users, software, even sites.
If you are packaging for a team and size is not a major issue (say, if you are going to distribute it on a network share internally or something)you can forget about provisioning and load everything manually.  Otherwise making
good use of provisioning can bring the size down.  Once you have built the VM, it is a single command line in Vagrant to build the box for you.<br/>
Well&hellip;that&rsquo;s all that I have time for today! If you are interested in my base Wheezy box let me know in the comments and I will make sure and post it GitHub or something (that seems to where are the big kids are posting their
vagrant boxes&hellip;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Relic]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/12/03/new-relic/"/>
    <updated>2012-12-03T00:00:00-05:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/12/03/new-relic</id>
    <content type="html"><![CDATA[<p>I have been using New Relic on my commercial server for a while now.  It&rsquo;s a great way to monitor all your customers sites/apps and make sure that things are running smoothly.  I really enjoy the weekly reports and the daily warnings if things are not running right.  I recently had a report of high cpu usage on my personal server and it let me know exactly what was causing the problem, so when I ssh&#8217;ed in to the server, I knew exactly what I needed to do!! Go and setup a free trial account right now and once you deploy to your server, they will send you a really cool t-shirt!!  And don&rsquo;t worry about cost!!  They have a basic version for free&hellip;or several hosts (AppFog, Rackspace) offer free standard monitoring with your server!! New Relic</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using like to make better queries]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/11/14/using-like-to-make-better-queries/"/>
    <updated>2012-11-14T00:00:00-05:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/11/14/using-like-to-make-better-queries</id>
    <content type="html"><![CDATA[<p>Today I am going to impart some more command line goodness on you! (You&rsquo;re welcome!)\n Last time we talked about using the     like term to pull out similar tables.  Now we will use it in a query to pull out similar values from a field.
 So here is the scenario: Let&rsquo;s say we are dealing with the WordPress options table.  All of our options are prefix with &lsquo;special_offers&rsquo;.  So rather then create multiple queries to pull the data from each one, we will use the like operator.</p>

<pre><code>select option_name, option_value from wp_options where option_name like 'special_offers%' \G
</code></pre>

<p>This returns all of the options that are prefixed with our &lsquo;special_offers&rsquo; prefix.  It&rsquo;s a great, easy way to pull options out of the database.</p>

<p>Now comes the fun part.  What about WordPress and it&rsquo;s built in function     get_option. True, but if you want the best performance, you don&rsquo;t want to make all those hits to the database.  So, lets create our own function that will let us use a more flexible mysql syntax</p>

<pre><code>function my_get_options($args)
{
    if(!is_array($args)){$needle = $args; $operator = '=';} else {
        $needle = $args['needle'];
        $default = (empty($args['default'])) ? '' : $args['default'];
        $operator = (empty($args['operator'])) ? '=' : $args['operator'];
    }

$query = "select option_name, option_value from wp_options where option_name $operator '$needle'";
$results = mysql_query($query)or die(mysql_error());
$num_rows = mysql_num_rows($results);
if($num_rows == 0)
$data = array($needle =&gt; $default);
     else {
        while($row = mysql_fetch_array($results)){
            $key = $row['option_name'];
            $value = $row['option_value'];
            $data[$key] = $value;
        }
    } 

return $data;
}
</code></pre>

<p> Yeah, that is a lot of code!  Let&rsquo;s go over it now.
So first of all, how do we implement this?</p>

<pre><code>$args = array('needle' =&gt; 'special_offers%', 'operator' =&gt; 'like');
$data = my_get_options($args);
</code></pre>

<p>The array sets the options (except for default, as this is really only useful for single options and not a group of options..I only included it to allow this to act as a total replacement for get_options)
 The args are parsed by a series of tests.  If it&rsquo;s not an array, we assume that $args is just a string with a needle.  Then we make sure that the optional arguments exist and if not, place default values in their place.  Finally we run the query.  We check for a response, so if there is no such options, the default value can be used. Finally, we return an array with the options in a key=>value paired array!
Even though we got a little bit WordPress specific at the end, this is some good solid db stuff that you can use whenever you have a lot of data.  Remember, the less calls you have to make to the database the faster and more efficient your code will run!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two pro tricks in MySQL]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/10/30/two-pro-tricks-in-mysql/"/>
    <updated>2012-10-30T00:00:00-04:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/10/30/two-pro-tricks-in-mysql</id>
    <content type="html"><![CDATA[<p>Chances are you use some form of gui when you interact with MySQL.  Imaright?  I don&rsquo;t.  I prefer to use the command line tools for pretty much everything that I do.  MySQL is no exceptions.  That being said, these two tricks are very helpful, even if you normally use a gui&hellip;in fact, the second trick will work in the gui&rsquo;s as well, &lsquo;cause it is really just some really cool sql.\n The first thing that we are looking at is how we end a sql statement. Typically, you use the &rsquo;;&lsquo; to end your statements like this:</p>

<pre><code>SELECT * FROM table WHERE type="device";
</code></pre>

<p>A pro trick is to use &ldquo;\G&rdquo; like this:</p>

<pre><code>DESCRIBE table\G
</code></pre>

<p>So what is the difference?  Well, &ldquo;\G&rdquo; gives a much easier to read print out of the data then the traditional tabular form.</p>

<pre><code>mysql&gt; select * from cms_phone_features where entry_id=4766\G 
*************************** 1. row *************************** 
entry_id: 4766
  row_id: 18973
  row_order: 0
  style: Touch Screen
  keyboard: Virtual
  camera_front: 1.3-megapixel
  camera_rear: 3.2-megapixel
1 row in set (0.00 sec)
</code></pre>

<p> The second trick that we are going to show today is some cool sql.  So here is the scenario:  You are dealing with a very large database with a massive amount of tables.  Now, all you really want to deal with are a subset of these tables.  They all happen to be prefixed &lsquo;ds_&rsquo;.  So how can we list just these tables?</p>

<pre><code>show tables like 'ds%'\G
</code></pre>

<p>The &lsquo;like&rsquo; term will list tables like whatever string you follow with.  The string must be in &lsquo;&rsquo; and the % is a wildcard that matches anything.</p>

<p> Not so bad huh?  As I am trying to strengthen my dba chops, you will be seeing database specific entries mixed in with my programming entries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finally Made it to 17]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/09/25/finally-made-it-to-17/"/>
    <updated>2012-09-25T00:00:00-04:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/09/25/finally-made-it-to-17</id>
    <content type="html"><![CDATA[<p>I usually like to on the cutting edge of my Linux, so it&rsquo;s kind of a shocker that I just now installed Fedora 17 on my laptop.  I intended t o do it much sooner, but important projects kept getting in the way.  I finally did a preupgrade and tried to update my live system&hellip;.but ended up crashing it anyway.  I did a reinstall and it was for the better.  I had a somewhat precarious partitioning scheme in place and I had recently upgrqaded my ram to the max 8 gigs for my machine&hellip;so some re-partitioning was certainly in order.\n I must say that I am impressed again with the latest Fedora offering.  Now I can&rsquo;t wait for 18!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NorthEastern PHP Conference]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/08/19/northeastern-php-conference/"/>
    <updated>2012-08-19T00:00:00-04:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/08/19/northeastern-php-conference</id>
    <content type="html"><![CDATA[<p>\nThis last weekend I was up in Boston speaking and attending a php developers conference.  It was a magical weekend!  It&rsquo;s always great to be surrounded my fellow developers!  This was the first time the conference was held, and the folks behind it did a great job for a first time!  Got to spend time with old friends and made some great new ones!  I can&rsquo;t wait for more PHP development action!  It&rsquo;s now my goal to make it to PHP Benelux AND FOSSDEM for some back to back nerdiness in Belgium!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Play]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/05/01/google-play/"/>
    <updated>2012-05-01T00:00:00-04:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/05/01/google-play</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I&rsquo;ve posted, I know that. Been a bit busy. =) I want to write a bit about Google Play.  I uploaded most of my music a while back and it seems a good service.  The only issue that I had at the outset, was the lack of desktop integration.  Then I found Nuvola Player.  It is really a browser front end for several cloud music services, including Google Play&hellip;that also gives Desktop Integration.  So it&rsquo;s a cool deal.  It has become my new player.  I am gunning to get a lot of this stuff like music in the cloud so that I can access it from everything.  My next step is to really integrate Google Drive better, then my next major purchase will be the new Google Nexus&hellip;=)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POSSCON 2012 Day 2 and Afterthoughts]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/04/01/posscon-2012-day-2-and-afterthoughts/"/>
    <updated>2012-04-01T00:00:00-04:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/04/01/posscon-2012-day-2-and-afterthoughts</id>
    <content type="html"><![CDATA[<p>Well, Thursday was the closing day of POSSCON.  What can I say?  It was awesome sauce!  Great speakers, good times.  Scott McNeely&rsquo;s talk was good and full of perspective.  Don&rsquo;t agree with him on two topics: php and software patents&hellip;but I am more of a NGO type (if you were there, you&rsquo;ll get it!)\nThe BOF Lunch was good times too.  We had some good interest in the PHP users group.<br/>
Bottom line: Can&rsquo;t wait until next year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POSSCON 2012 Day 1]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/03/29/posscon-2012-day-1/"/>
    <updated>2012-03-29T00:00:00-04:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/03/29/posscon-2012-day-1</id>
    <content type="html"><![CDATA[<p>Well, I am not going to sleep until I blog about POSSCON.  It really started yesterday evening with the Engine Yard Beer Social.  That was a ton of fun! Then today we had a blast.  A bunch of great talks.  Dave Stokes gave a great talk about some of the new stuff to expect in the next version of MySQL&hellip;it&rsquo;s exciting.  Also, great talks from the president of SugarCRM, Mad Dog, and others.  It was a great start.  And of course then end of the day was the Git Hub Drink UP.  Wow!!  What a crowd!!  Certainly the biggest POSSCON ever!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yay Updates!]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/03/24/yay-updates/"/>
    <updated>2012-03-24T00:00:00-04:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/03/24/yay-updates</id>
    <content type="html"><![CDATA[<p>So, I made two major updates to the blog code today.  First of all, I imported all my old blog posts going back to good old 2008.  Secondly, I added pagination to the blog so you can view all the old posts!! Yay me!!\n
In other news, POSSCON Is getting closer!  This year I will do a better job of blogging it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 5.4.0 is out!  Web Server Review!]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/03/19/php-5-4-0-is-out-web-server-review/"/>
    <updated>2012-03-19T00:00:00-04:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/03/19/php-5-4-0-is-out-web-server-review</id>
    <content type="html"><![CDATA[<p>Let me start out by saying that I have been waiting for this feature for a while now.  When ever I male forays into the world of Rails and Python I always come back to php just a little bit jealous of the testing servers that come with them.  Well, in just a little bit, I will be jealous no more!! \n First things first.  We must install the latest version of php.  I use Fedora for my development machine, so I am going to give you the steps you need in YUM for doing this.  I recommend a little google search for the easiest way to do this in your distro&hellip;.actually, you really need to setup a repo that will let you keep to the latest version of php anyway.
 I use the YUM repo at <a href="http://rpms.famillecollet.com/fedora/16/remi/x86_64/.">http://rpms.famillecollet.com/fedora/16/remi/x86_64/.</a> To install the repo into your system type:</p>

<pre><code>wget http://rpms.famillecollet.com/fedora/16/remi/x86_64/remi-release-16-6.fc16.remi.noarch.rpm
</code></pre>

<p>Follow that up with a:</p>

<pre><code>sudo rpm -Uvh remi-release*rpm
</code></pre>

<p>And then</p>

<pre><code> sudo yum --enablerepo=remi-test install php
</code></pre>

<p>And that will install the latest version of php and all it&rsquo;s dependencies!!
 Next we will need a proper test!  Lets install the latest version of CI and see if we can get it up and running!!
For this, I am going to clone the latest CI from git into a new folder and then run the server from there.  If you are following along at home, feel free to use whatever code you want!
So, to run the server, we cd into our site and type a simple:     php -S localhost:8000 (bear in mind that you can use whatever port you want..and even a server name other then local host&hellip;take a peak at the docs)
<img src="https://lh6.googleusercontent.com/-BmMXKe-UoOI/T2d6JIBddpI/AAAAAAAAE8U/y1L5F55NG2s/s968/screenshot_php_server.png" alt="php server in the terminal" /></p>

<pre><code>php server in the terminal
</code></pre>

<p><img src="https://lh6.googleusercontent.com/-TUbOwsrfz5A/T2d8qZPdkcI/AAAAAAAAE8w/A1JiuQyr6P8/s556/screenshot_uzbl_localhost.png" alt="server running the browser" /></p>

<pre><code>php server in the browser
</code></pre>

<p>So, first impressions are pretty cool!  It&rsquo;s time to get back to work, but I will be playing some more with this I assure you!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finally, the feed works]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/03/08/finally-the-feed-works/"/>
    <updated>2012-03-08T00:00:00-05:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/03/08/finally-the-feed-works</id>
    <content type="html"><![CDATA[<p> I finally had the time to sit down and write a RSS feed for my blog.  I obviously wrote it in php using codeigniter.  There are a few good tutorials out there, but let me add my own ten cents to the pile!!\n
 So the first spot is the controller.  I created a controller called Feed.  I also could have just created a method under my Blog controller, but I find this is a little bit neater code.</p>

<pre><code>function index()
{
    $this-&gt;load-&gt;helper('inflector');
        $this-&gt;load-&gt;helper('xml');  
    $this-&gt;load-&gt;helper('text');  
    $this-&gt;load-&gt;model('Blog_model', 'blog');    

    $data['entries'] = $this-&gt;blog-&gt;get_last_ten_entries();
    $this-&gt;load-&gt;view('rss', $data);


}
</code></pre>

<p> This loads the required CI helpers, as well as by Blog Model.  Notice that I am using a custom method in my model to retrieve the last ten entries.  I am reusing the same method that populated my main blog page.</p>

<p> The first thing to remember regarding the xml page that you define in your view is opening the xml using the echo statement.  The syntax would otherwise confuse the compiler.  After that we just use pure XML and insert our dynamic data with php short tags.  Surprisingly enough, that is it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Importance of Wireframes]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/03/01/the-importance-of-wireframes/"/>
    <updated>2012-03-01T00:00:00-05:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/03/01/the-importance-of-wireframes</id>
    <content type="html"><![CDATA[<p>The creation of a wireframe is a very important part of the web development process.  Lots of different designers have their own way.  There are programs that you can use to make wireframes.  I personally prefer to draw mine by hand.  Here is an example of a few screens that I designed for a client. (add wireframe png later)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some coding with my daughter]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/01/25/some-coding-with-my-daughter/"/>
    <updated>2012-01-25T00:00:00-05:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/01/25/some-coding-with-my-daughter</id>
    <content type="html"><![CDATA[<p>Technically we try and do this the first of the year, but time was not on our side.  For one thing, Luba started school this past fall, so we have a lot of stuff to do with that.  Also, I&rsquo;ve been very busy as well. But, better late then never!  This year I decided to introduce her to compiling&hellip;(she saw me compiling some server extensions and asked me why it was doing it by itself).  So, I&rsquo;ve been going back to my youth and playing around with c++ the past week (I am planning on getting back into application development) and so here is a cool little bit of code, daddy/daughter style.\n</p>

<p> If you are not familiar with the C languages, I am making use of a struct&hellip;.this is essentially the same as a class.  It&rsquo;s declared a bit differently, but the end is the same.  We created a person template in our structure and called two instances of it, yours and mine.
The first time that we compiled, it just asked for name and age.  Then we added the method to calculate the difference in the ages.  Obviously we need more structure to make sure that if the first person is younger then the second it will still be correct, but for a bit of daddy/daughter time it suffices.
 Fun was making mistakes and watching her see the compiler catch them!  Damn I love raising a geek..I do not know what I would do if she were interested in stuff like sports&hellip;=)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Blowfish to encrpyt your passwords]]></title>
    <link href="http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/01/22/using-blowfish-to-encrpyt-your-passwords/"/>
    <updated>2012-01-22T00:00:00-05:00</updated>
    <id>http://weatheredwatcher.github.io/weatheredwatcher/blog/2012/01/22/using-blowfish-to-encrpyt-your-passwords</id>
    <content type="html"><![CDATA[<p>I can&rsquo;t tell you how many times I&rsquo;ve seen passwords put in databases using the md5 function that is built into php.  It is fast, easy to use and very insecure.  Granted, it&rsquo;s really just a last defense in case the database is accessed right?  True, but what if your users are in the majority of internet users who use the same passwords for everything?  So let&rsquo;s talk about using a little bit higher security on our passwords.\n</p>

<p>Here is a helper I wrote for Codeigniter
<a href="https://gist.github.com/1655410.js?file=brypt-helper.php">https://gist.github.com/1655410.js?file=brypt-helper.php</a></p>

<p> So here is what you need to know: We are using the function crypt().  The syntax for crypt is:</p>

<pre><code>crypt(string $string, seed $seed);
</code></pre>

<p>Check the php references for details on the other methods of encryption.  We are only talking about bcrypt or bluefish toad
 The way that we specify that it is bluefish that we infact want to use is in the seed itself.  We prefix it with a $2a$05$.  The first part, $2a$ is what give us the encryption method, bluefish.  The second part, $05$ sets how many passes will be used.  The more passes, the more secure, but also the longer it takes to encrypt.  The seed is the key.  By using a seed that is unique, it makes it impossible to break the hash with what is called a &ldquo;rainbow table.&rdquo;  You make a rainbow table by compiling a dictionary of words and running them through the hash (md5, sha, bluefish) and this gives you a massive list of possible passwords and their hashes.  The adding of a seed removes the chances that the password/hash will be in a rainbow table.  The use of a seed is pretty effective in making the password unbreakable&hellip;.well that is if only the hash was exposed&hellip;the seed is typically located in the table right next to the hash!</p>
]]></content>
  </entry>
  
</feed>
